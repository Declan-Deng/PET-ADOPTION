import { message } from 'antd';
import { history } from 'umi';

export interface InitialState {
  currentUser?: {
    name: string;
    role: string;
  };
}

export async function getInitialState(): Promise<InitialState> {
  const token = localStorage.getItem('token');
  const userInfo = localStorage.getItem('userInfo');

  if (!token || !userInfo) {
    history.push('/user/login');
    return {};
  }

  try {
    const user = JSON.parse(userInfo);
    return {
      currentUser: {
        name: user.username,
        role: user.role,
      },
    };
  } catch (error) {
    history.push('/user/login');
    return {};
  }
}

export const layout = {
  logo: 'https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg',
  menu: {
    locale: false,
  },
  logout: () => {
    localStorage.removeItem('token');
    localStorage.removeItem('userInfo');
    history.push('/user/login');
    message.success('退出登录成功');
  },
  rightRender: () => {
    const userInfo = localStorage.getItem('userInfo');
    const user = userInfo ? JSON.parse(userInfo) : {};
    return (
      <div style={{ display: 'flex', alignItems: 'center' }}>
        <span style={{ marginRight: 12 }}>{user.username || 'User'}</span>
        <span
          style={{ cursor: 'pointer' }}
          onClick={() => {
            localStorage.removeItem('token');
            localStorage.removeItem('userInfo');
            history.push('/user/login');
            message.success('退出登录成功');
          }}
        >
          退出登录
        </span>
      </div>
    );
  },
};

export const request = {
  timeout: 10000,
  errorConfig: {
    errorHandler: (error: any) => {
      console.log('请求错误:', error);
      if (error.response) {
        if (error.response.status === 401) {
          localStorage.removeItem('token');
          localStorage.removeItem('userInfo');
          history.push('/user/login');
          message.error('登录已过期，请重新登录');
        } else if (error.response.status === 403) {
          message.error('没有权限访问');
        } else {
          message.error('请求失败，请稍后重试');
        }
      } else if (error.request) {
        message.error('网络错误，请检查后端服务是否正常');
      } else {
        message.error('请求配置错误');
      }
      throw error;
    },
  },
  requestInterceptors: [
    (config: any) => {
      const token = localStorage.getItem('token');
      if (token) {
        config.headers['Authorization'] = `Bearer ${token}`;
      }
      return config;
    },
  ],
  responseInterceptors: [
    (response: any) => {
      return response;
    },
  ],
};
